KISSY 类库编码规范
=============================

* `Google JavaScript 编码规范 <http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml>`_ 
* `Google JavaScript 编码规范(中文版) <http://kissyteam.github.com/coding-style/javascriptguide.xml>`_
* `jQuery编码规范 <http://yi-programmer.com/blog/2010-10-16_jquery-style-guidelines.html>`_
* `Dojo Javascript 编程规范 <http://blog.bingo929.com/dojo-javascript-style-guide.html>`_


JavaScript 语言规范
=========================
* 声明变量时, 必须加上 var 关键字;
* 尽量减少全局变量的使用;
* 永远不要使用 const 关键字;
* 语句总是以分号结尾;
* 不要在块内声明一个函数;
* 复杂应用时, 进行适当的异常处理;
* 适时使用自定义异常;
* 标准特性优于非标准特性(如果类库有提供, 则尽量使用类库中的函数);
* 不要封装基本类型;
* 小心使用多级原型结构(推荐使用 S.extend 实现继承);
* 添加方法和成员, 使用 Foo.prototype.bar = function() {...} 形式(推荐使用 S.augment);
* 小心使用闭包, 特别是牵涉到 DOM 时;
* 只在解析序列化串时使用 eval();
* 不要使用 with;
* 减少使用 continue 和 break;
* 仅在构造器, 方法及闭包中使用 this;
* for-in 循环只用于 object/map/hash 的变量;
* 永远不要使用 Array 作为 map/hash/associative 数组;
* 使用 Array/Object 直接量, 而不是用 Array/Object 构造器;
* 不要修改内置对象的原型;
* 不是使用 IE 下的条件注释;
* 尽量使用严格的等价判断符 === , 尽量不用 == .



代码风格
=========================

行与缩进
-------------------------

语句行
    #. 尽可能不要让每行超过80个字符;
    #. 不要出现 tab 符号;
    #. 语句必须以分号作为结束符, 不要忽略分号;


空格
    #. 数值操作符(如, +/-/*/% 等)两边留空, 如果一行太长, 则适当减少空格;
    #. 起始大括号的左边总是留一空格;
    #. 赋值操作符/等价判断符两边留一空格;
    #. 空行不要有空格;
    #. 行尾不要有空格;
    #. 逗号和冒号后一定要跟空格;
    #. 点号前后不要出现空格;
    #. 空对象和数组不需要填入空格;
    #. 函数名末尾和左括号之间不要出现空格;


空行
    #. 逻辑上独立的代码块使用空行分隔;
    #. 文件末尾留 1~2 个空行;


缩进
    #. 以4个空格为一缩进层次;
    #. 变量声明:
        * 多个变量声明时, 换行表示;
        * 参照 var 关键字, 缩进一层次;
    #. 函数参数:
        * 函数参数写在同一行上;
        * 但如果一行超过 80 字符, 则让每个参数独占一行, 并换行后缩进一层次, 或与左括号对齐;
        * 传递匿名函数时, 函数体应从调用该函数的左边开始缩进;
    #. 数组和对象初始化时:
        * 如果初始值不是很长, 尽量保持写在单行上;
        * 初始值占用多行时, 缩进一层次;
        * 对象中, 比较长的变量/数值, 不要以冒号对齐;
    #. 二元/三元操作符:
        * 操作符始终跟随前行;
        * 实在需要缩进时, 按照上述缩进风格;
    #. 表达式中的缩进同变量声明时;



控制块 <--- 暂时去掉
-------------------------
#. 不要使用 object && object.method() 取代 if/else 语句，除非在条件判断中;
#. 不要使用三元操作符取代 if/else 语句;
#. 不要把语句和判断条件放在同一行上;



括号
-------------------------
原则: 不要滥用括号, 必要时一定要使用.

    #. if/else/while/for 条件表达式必须有小括号;
    #. 语句块必须有大括号;
    #. 一元操作符(如 delete, typeof, void)或在某些关键词(如 return, throw, case, new) 之后, 不要使用括号;



变量
-------------------------
#. 变量如有较广的作用域, 使用全局变量; 如果是在类中, 可以设计成为一个类的成员;
#. 函数体中, 多个局部变量集中在一起声明, 避免分散;
#. 适当延迟变量的初始化;



字符串
-------------------------
#. JS 代码中, 单行字符串使用单引号;
#. JS 代码中, 多行字符串使用"+"拼接形式, 不要使用 '\' 拼接;
#. HTML 中 Element 属性, 使用双引号;






命名规范
=========================
原则：
    * 尽量避免潜在冲突;
    * 精简短小, 见名知意;

#. 普通变量统一使用驼峰形式;
#. 常量使用全部大写, 多个单词以下划线分隔;
#. 枚举量, 同常量;
#. 私有变量, 属性和方法, 名字以下划线开头;
#. 保护变量, 属性和方法, 名字同普通变量名;
#. 方法和函数的可选参数, 名字以 opt_ 开头, 使用 ``@param`` 标记说明;
#. 方法和函数的参数个数不固定时:
    * 可添加参数 var_args 为参数个数;
    * 取代使用 arguments;
    * 使用 ``@param`` 标记说明;
#. Getter/Setter 命名:
    * 以 getFoo/setFoo(value) 形式;
    * 布尔类型使用 isFoo()/hasFoo()/canDo()/shouldDO() 也可;
#. 命名空间:
    * 为全局代码使用命名空间, 如 sloth.*;
    * 外部代码和内部代码使用不同的命名空间;
#. 重命名那些名字很长的变量, 不要在全局范围内创建别名, 而仅在函数块作用域中使用;
#. 文件名应全部使用小写字符, 且不包含除 - 和 _ 外的标点符号;
#. 临时的重复变量建议以 i, j, k, ..., 命名;

#. KISSY 组件命名规范:
    * HTML 中元素的 class/ID: ks-comp[-xxx] 比如: ks-editor-toolbar-item;
    * HTML 中元素的data 属性:  data-ks-comp[-xxx] 比如: data-ks-suggest;
    * hook: KS_Comp 比如: KS_Switchable;

附上常用缩略语:

<a href="http://kissyteam.github.com/coding-style/assets/wordlist.jpg" target="_blank"><img style="height: 800px;" title="常用缩略词" src="http://kissyteam.github.com/coding-style/assets/wordlist.jpg" alt="wordlist.jpg" /></a>



类型语言
========================
指属性, 函数参数的类型. 请参照 JSDoc 中的类型语言定义.

<a href="http://kissyteam.github.com/coding-style/assets/javascript-type.jpg" target="_blank"><img title="JavaScript 类型" src="http://kissyteam.github.com/coding-style/assets/javascript-type.jpg" alt="javascript-type.jpg" /></a>

注释风格
=========================
包括文档注释, 类注释, 属性/方法/函数注释, 行注释等, 请参照 JSDoc 中的注释风格.


KISSY 类库目录组织规范
=========================
kissy-directory-structure.jpg



工具
=========================

JSDoc-Toolkit
-------------------------

::

    `JsDoc Toolkit <http://code.google.com/p/jsdoc-toolkit/>`_ is an application,
    written in JavaScript, for automatically generating template-formatted,
    multi-page HTML (or XML, JSON, or any other text-based) documentation
    from commented JavaScript source code.


::

    java -jar jsrun.jar app/run.js -c=conf/sample.conf



closure-compiler
-------------------------------
* 工程: http://code.google.com/closure/compiler/
* 在线工具: http://closure-compiler.appspot.com/
* 命令行工具: kissy-tools/closure-compiler

文档中列出了 compiler 的三种模式:
--compilation_level [WHITESPACE_ONLY | SIMPLE_OPTIMIZATIONS | ADVANCED_OPTIMIZATIONS]
#. WHITESPACE_ONLY(最弱): 去除注释和不必要的空白字符等压缩处理;
#. SIMPLE_OPTIMIZATIONS(简单优化): 除压缩外, 优化表达式和函数, 重命名变量/参数名; -- 默认模式.
#. ADVANCED_OPTIMIZATIONS(高级优化): 除上述功能外, 进一步重命名, 移出无用代码, 保证安全前提下进行函数调用换成内敛形式;

::
    - java -jar compiler.jar --js=in1.js --js=in2.js ... --js_output_file=out.js




closure linter
-------------------------

::

    The `Closure Linter <http://code.google.com/closure/utilities/>`_ is a utility that checks JavaScript files for style issues such
     as operator placement, missing semicolons, spacing, the presence of JsDoc annotations, and more.

::

    # install
    easy_install http://closure-linter.googlecode.com/files/closure_linter-latest.tar.gz

    # usage
    gjslint path/to/my/file.js

    # or
    fixjsstyle path/to/file1.js



