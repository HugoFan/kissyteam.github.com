.. currentmodule:: Node

NodeList
==================================================

Class
-----------------------------------------------

  * :class:`NodeList`

Class Detail
-----------------------------------------------

.. class:: NodeList

    | **NodeList** (html [ ,props , ownerDocument ])

    :param string|HTMLElement|Text|Window|HTMLDocument|HTMLCollection|ArrayList<HTMLElement>|NodeList:

         * string : html 字符串, 例如 ``<div>`` , 根据该字符串生成 ``NodeList`` 对象, 代表节点个数为 html 字符串实际产生的 DOM 节点个数.
         * HTMLElement|Text|Window|HTMLDocument : 把原生 ``DOM`` 节点包装成一个 ``NodeList`` 对象, 这个情景一般可用 ``S.all`` 代替.
         * HTMLCollection|ArrayList<HTMLElement> : 将原生节点列表包装为一个 ``NodeList`` 对象.
         * NodeList : 从当前 NodeList 对象中克隆一个新对象返回.
                                         
    :param object props: 属性键值对, 对生成的 NodeList 对象代表的原生 DOM 节点设置属性. 仅当 html 参数为 html 字符串时使用.
    :param HTMLDocument ownerDocument: 该 NodeList 产生的原生 DOM 节点所属的文档对象. 仅当 html 参数为 html 字符串时使用.

    .. versionadded:: 1.2
        推荐除了需要生成文本节点的情况下, 统统使用 :meth:`~NodeList.all` 代替.
        

    .. note::

        以下的这些方法,
        :func:`~DOM.filter`, :func:`~DOM.test`, :func:`~DOM.hasClass`, :func:`~DOM.addClass`, :func:`~DOM.removeClass`,
        :func:`~DOM.replaceClass`, :func:`~DOM.toggleClass`, :func:`~DOM.removeAttr`, :func:`~DOM.attr`, :func:`~DOM.hasAttr`,
        :func:`~DOM.prop`, :func:`~DOM.hasProp`, :func:`~DOM.val`, :func:`~DOM.text`, :func:`~DOM.css`, :func:`~DOM.toggle`,
        :func:`~DOM.offset`, :func:`~DOM.scrollIntoView`, :func:`~DOM.parent`, :func:`~DOM.next`, :func:`~DOM.prev`,
        :func:`~DOM.siblings`, :func:`~DOM.children`,
        :func:`~DOM.contains`, :func:`~DOM.html`, :func:`~DOM.remove`, :func:`~DOM.data`, :func:`~DOM.removeData`,
        :func:`~DOM.hasData`, :func:`~DOM.unselectable`, :func:`~DOM.contains`,
        :func:`~Event.on`, :func:`~Event.detach`, :func:`~Event.fire`,
        的调用都会被转发给 :mod:`DOM` , :mod:`Event` , 原 ``DOM`` , ``Event`` 对应方法的第一个参数传入一个原生 DOM 节点数组, 而这个原生 DOM 节点数组则是由当前的 ``KISSY NodeList`` 对象得到的.

        ``Node`` 模块会对返回值进行处理:

            * 如果返回值为单个节点或节点数组, 则包装为 :class:`NodeList`
            * 如果返回值为 ``undefined`` , 则返回调用者 ``NodeList`` 对象
            * 其他, 直接返回


    .. versionchanged:: 1.2
        ``Node`` 模块的 ``on`` 方法中的 ``this`` 关键字指向当前绑定事件的单个原生节点, 事件对象的 ``target`` 和 ``relatedTarget`` 也指向对应的原生节点, 例如：

    .. code-block:: html

        <div id='d1' class='d'></div>
        <div id='d2' class='d'></div>

        <script>
            KISSY.Node.all(".d").on("mouseenter",function(ev){
                this.id // => d1 或者 d2
                ev.target.id // => d1 或者 d2
                ev.relatedTarget // => d1 或者 d2 或者 document.body
                                // 或者 document.documentElement
            });
        </script>

        
Demo
-----------------------------------------------

**得到一个包装新文本节点的 KISSY NodeList**

    .. code-block:: javascript

        var nl=new NodeList("aaa");
        nl.getDOMNode().nodeType ==3 // => true : Html Text Node

**得到一个包装新 dom element 的 KISSY NodeList**

    .. code-block:: javascript

        var nl=NodeList.all("<div></div><p></p>");
        var domNodes=nl.getDOMNodes();
        domNodes[0].nodeType == 1 // => true : Html Element

**得到一个包装现有 dom element 的 KISSY NodeList**

    .. code-block:: javascript

        var domNodes=document.getElementsByTagName("div");
        var nl=NodeList.all(domNodes);
        domNodes=nl.getDOMNodes();
        domNodes[0].nodeType == 1 // => true : Html Element
        domNodes[0].nodeType == 1 // => true : Html Element

**当然 NodeList.all 可以直接获取选择器字符串匹配的节点列表**

    .. code-block:: javascript

        var nl=NodeList.all("div"); // 选择器功能而不是创建 text node
        domNodes=nl.getDOMNodes();
        domNodes[0].nodeType == 1 // => true : Html Element
        domNodes[0].nodeType == 1 // => true : Html Element
