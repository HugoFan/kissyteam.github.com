KISSY 源码规范
===============================

有疑问留言或联系 yiminghe@gmail.com

..  note::

    提交到  https://github.com/kissyteam/kissy 中的代码请遵循此规范.


命名
----------------------------------

文件与模块
```````````````````````

文件名称使用小写表示，复合词用 ``-`` 分隔，例如 ``attr.js`` , ``iframe-transport.js`` .

所有的代码以模块形式组织，模块名如果写的话需要和文件路径保持一致，例如

.. code-block:: javascript

    KISSY.add("ajax/iframe-transport",function(){
    });


变量、类与方法
`````````````````````

对类，命名空间使用 PasCalCasing， 例如 ``MenuButton`` , ``Overlay`` .

对常量使用大小命名，复合词使用 ``_`` 分隔，例如 ``MAX_COMBO_URL_LENGTH`` .


对变量，非私有的成员函数，成员对象，局部变量使用 camelCasing，例如

.. code-block:: javascript

    var domAttribute = 'type';
    function MenuButton(){
    }
    MenuButton.prototype.alignWithEl = true;
    /**
     * @protected
     */
    MenuButton.prototype.handleClickInternal=function(){};

私有成员函数以 ``_`` 开头，推荐放入闭包中，使用 camelCasing，例如

.. code-block:: javascript

    KISSY.add("dom",function(){
        var DOM={
            width: function(){
                return this._getWidth();
            },
            _getWidth: function(){

            },
            height: function(){
                return getHeight(this);
            }
        };
        function getHeight(){

        }
    });


注释
-----------------------------------------------------------------

使用 /** xx */ 注释表示需要出现在文档中的注释，除此之外不要使用 /** xx */ 注释，
注释使用 `jsduck <https://github.com/senchalabs/jsduck>`_ 规范，例如

.. code-block:: javascript

    /**
     * @class Overlay
     */
    function Overlay(){

    }


用 ``//`` 表示一般性的单行注释，例如

.. code-block:: javascript

    // get original offset
    var originalOffset = node.offset();

用 ``/* */`` 表示一般性的多行注释，例如

.. code-block:: javascript

    /*
       adjust alignment, for example:
       http://docs.kissyui.com
    */
    var x = overlay.set("align",{});


代码组织
----------------------------------------------

一个模块文件中不要包含多个公开的类，例如

不要这样：

.. code-block:: javascript

    KISSY.add("overlay",function(){
        function Overlay(){

        }

        function Dialog(){

        }
    });

要这样分成两个模块（文件）：

.. code-block:: javascript

    KISSY.add("overlay",function(){
        function Overlay(){

        }
    });


    KISSY.add("overlay/dialog",function(){
        function Dialog(){

        }
    });


组件模块的按照以下的顺序组织：

#. 模块变量声明
#. 构造器
#. 公用成员函数
#. 保护性成员函数
#. 私有成员函数
#. 属性( ATTRS )
#. 模块私有函数

例如：

.. code-block:: javascript

    KISSY.add(function(S, Component){

        var DOM = S.DOM;

        var Button = Component.Controller.extend({

            /**
             * @public
             */
            show: function(){

            },
            /**
             * @protected
             */
            handleClickInternal: function(){

            },

            _doClick: function(){

            }
        },{
            ATTRS:{
                /**
                 * @type String
                 */
                content:{}
            }
        });

        // ------------------------- private

        function onHover(){

        }

    },{
        requires:['Component']
    });


在模块的代码的各个部分考虑使用字母排列的方式组织。

一般规则
---------------------------------------

大括号用法
``````````````````````````````````````````

大括号后请换行.

结束大括号需要和开始大括号的那一行开头语句对齐.

如果后面没有开始大括号，那么结束大括号需要单独占一行

.. code-block:: javascript

    if(UA.ie){
        alert('i'm ie');
    }

大括号内只包含一行语句的可以不换行，例如

.. code-block:: javascript

    Draggable.ATTRS = {
        node:{
            getter:function(selector){ return S.all(selector); }
        }
    };

如果后面没有 while else else if 等， 那么结束大括号需要单独占一行

.. code-block:: javascript

    if(UA.ie){
        do{
            doIe();
        } while(i>0);
    }

即使只有一条语句，也请加括号

for(var i = 0; i < 100; i++){
    doSomething();
}

空格用法
``````````````````````````````````````````

如果大括号不换行，那么需要在 ``{`` 后和 ``}`` 前加入空格，例如

.. code-block:: javascript

    var x = { getter: function(){ return 1; } };

``(`` 前和 ``)` 前后要加入空格，例如应当

.. code-block:: javascript

    if (UA.ie) {

    }

在函数的参数间请加入空格

.. code-block:: javascript

    function offset(el, value){

    }

    offset(el, 10);

``(`` 后与 ``)`` 前不要加入空格，例如应该

.. code-block:: javascript

    offset(x,10);

而不是

.. code-block:: javascript

    offset( x,10 );


函数调用和 ``(`` 不要加入空白，例如应该

.. code-block:: javascript

    offset(x,10);

而不是

.. code-block:: javascript

    offset (x,10);

``[`` 后和 ``]`` 前不要加上空格，例如应该

.. code-block:: javascript

    var x = [1, 2];

而不是

.. code-block:: javascript

    var x = [ 1, 2 ];

``=`` ``||`` ``==`` 等二元运算符前后都请加入空格，例如应该

.. code-block:: javascript

    var x = [1,2];

    if (i == 2) {

    }

    for (var i = 0; i < 2; i++) {

    }

而不是

.. code-block:: javascript

    var x=[1,2];


一元操作符后不要有空白，例如应该

.. code-block:: javascript

    if (!x) {

    }

而不是

.. code-block:: javascript

    if (! x) {

    }

json 对象中 ``:` 与属性名间不要有空格，在属性值间要有空格，例如

.. code-block:: javascript

    {
        x: 1
        y: function(){
            return 2;
        }
    }


缩进
---------------------------------------

使用连续的4个空白字符表示缩进

不要使用 tab 来表示缩进

对整块内容进行缩进，例如应该

.. code-block:: javascript

    if (!x) {
        alert(1);
        alert(2);
    }

而不是

.. code-block:: javascript

    if (!x) {
        alert(1);
    alert(2);
    }


即使没有大括号，在一定情况下也要缩进，例如

.. code-block:: javascript

    switch (x) {
        case 1:
            alert(1);
            break;
        case 2:
            alert(2);
    }